import { __awaiter } from "tslib";
import { APP_INITIALIZER, isDevMode } from '@angular/core';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
import { NGX_GTAG_FN } from '../tokens/ngx-gtag-token';
import { DOCUMENT } from '@angular/common';
/**
 * Provide a DI Configuration to attach GA Initialization at Angular Startup Cycle.
 */
export const NGX_GOOGLE_ANALYTICS_INITIALIZER_PROVIDER = {
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: GoogleAnalyticsInitializer,
    deps: [
        NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,
        NGX_GTAG_FN,
        DOCUMENT
    ]
};
/**
 * Create a script element on DOM and link it to Google Analytics tracking code URI.
 * After that, execute exactly same init process as tracking snippet code.
 */
export function GoogleAnalyticsInitializer(settings, gtag, document) {
    return () => __awaiter(this, void 0, void 0, function* () {
        if (!settings.trackingCode) {
            if (!isDevMode()) {
                console.error('Empty tracking code for Google Analytics. Make sure to provide one when initializing NgxGoogleAnalyticsModule.');
            }
            return;
        }
        if (!gtag) {
            if (!isDevMode()) {
                console.error('Was not possible create or read gtag() fn. Make sure this module is running on a Browser w/ access to Window interface.');
            }
            return;
        }
        if (!document) {
            if (!isDevMode()) {
                console.error('Was not possible to access Document interface. Make sure this module is running on a Browser w/ access do Document interface.');
            }
        }
        // Set default ga.js uri
        settings.uri = settings.uri || `https://www.googletagmanager.com/gtag/js?id=${settings.trackingCode}`;
        // these commands should run first!
        const initialCommands = [
            { command: 'js', values: [new Date()] },
            { command: 'config', values: [settings.trackingCode] }
        ];
        settings.initCommands = [...initialCommands, ...(settings.initCommands || [])];
        for (const command of settings.initCommands) {
            gtag(command.command, ...command.values);
        }
        const s = document.createElement('script');
        s.async = true;
        s.src = settings.uri;
        if (settings.nonce) {
            s.setAttribute('nonce', settings.nonce);
        }
        const head = document.getElementsByTagName('head')[0];
        head.appendChild(s);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLWFuYWx5dGljcy5pbml0aWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy9zcmMvIiwic291cmNlcyI6WyJsaWIvaW5pdGlhbGl6ZXJzL2dvb2dsZS1hbmFseXRpY3MuaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBWSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBR3BHLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV2RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx5Q0FBeUMsR0FBYTtJQUNqRSxPQUFPLEVBQUUsZUFBZTtJQUN4QixLQUFLLEVBQUUsSUFBSTtJQUNYLFVBQVUsRUFBRSwwQkFBMEI7SUFDdEMsSUFBSSxFQUFFO1FBQ0osbUNBQW1DO1FBQ25DLFdBQVc7UUFDWCxRQUFRO0tBQ1Q7Q0FDRixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLDBCQUEwQixDQUN4QyxRQUFrQyxFQUNsQyxJQUFZLEVBQ1osUUFBa0I7SUFFbEIsT0FBTyxHQUFTLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLGdIQUFnSCxDQUFDLENBQUM7YUFDakk7WUFFRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLHlIQUF5SCxDQUFDLENBQUM7YUFDMUk7WUFFRCxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLCtIQUErSCxDQUFDLENBQUM7YUFDaEo7U0FDRjtRQUVELHdCQUF3QjtRQUN4QixRQUFRLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLElBQUksK0NBQStDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV0RyxtQ0FBbUM7UUFDbkMsTUFBTSxlQUFlLEdBQW1DO1lBQ3RELEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBRSxJQUFJLElBQUksRUFBRSxDQUFFLEVBQUU7WUFDekMsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFFLFFBQVEsQ0FBQyxZQUFZLENBQUUsRUFBRTtTQUN6RCxDQUFDO1FBRUYsUUFBUSxDQUFDLFlBQVksR0FBRyxDQUFFLEdBQUcsZUFBZSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFFakYsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzFDO1FBRUQsTUFBTSxDQUFDLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDZixDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFFckIsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ2xCLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztRQUVELE1BQU0sSUFBSSxHQUFvQixRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUEsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciwgQVBQX0lOSVRJQUxJWkVSLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HWF9HT09HTEVfQU5BTFlUSUNTX1NFVFRJTkdTX1RPS0VOIH0gZnJvbSAnLi4vdG9rZW5zL25neC1nb29nbGUtYW5hbHl0aWNzLXNldHRpbmdzLXRva2VuJztcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NTZXR0aW5ncyB9IGZyb20gJy4uL2ludGVyZmFjZXMvaS1nb29nbGUtYW5hbHl0aWNzLXNldHRpbmdzJztcbmltcG9ydCB7IElHb29nbGVBbmFseXRpY3NDb21tYW5kIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pLWdvb2dsZS1hbmFseXRpY3MtY29tbWFuZCc7XG5pbXBvcnQgeyBOR1hfR1RBR19GTiB9IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ3RhZy10b2tlbic7XG5pbXBvcnQgeyBHdGFnRm4gfSBmcm9tICcuLi90eXBlcy9ndGFnLnR5cGUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIFByb3ZpZGUgYSBESSBDb25maWd1cmF0aW9uIHRvIGF0dGFjaCBHQSBJbml0aWFsaXphdGlvbiBhdCBBbmd1bGFyIFN0YXJ0dXAgQ3ljbGUuXG4gKi9cbmV4cG9ydCBjb25zdCBOR1hfR09PR0xFX0FOQUxZVElDU19JTklUSUFMSVpFUl9QUk9WSURFUjogUHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgbXVsdGk6IHRydWUsXG4gIHVzZUZhY3Rvcnk6IEdvb2dsZUFuYWx5dGljc0luaXRpYWxpemVyLFxuICBkZXBzOiBbXG4gICAgTkdYX0dPT0dMRV9BTkFMWVRJQ1NfU0VUVElOR1NfVE9LRU4sXG4gICAgTkdYX0dUQUdfRk4sXG4gICAgRE9DVU1FTlRcbiAgXVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBzY3JpcHQgZWxlbWVudCBvbiBET00gYW5kIGxpbmsgaXQgdG8gR29vZ2xlIEFuYWx5dGljcyB0cmFja2luZyBjb2RlIFVSSS5cbiAqIEFmdGVyIHRoYXQsIGV4ZWN1dGUgZXhhY3RseSBzYW1lIGluaXQgcHJvY2VzcyBhcyB0cmFja2luZyBzbmlwcGV0IGNvZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBHb29nbGVBbmFseXRpY3NJbml0aWFsaXplcihcbiAgc2V0dGluZ3M6IElHb29nbGVBbmFseXRpY3NTZXR0aW5ncyxcbiAgZ3RhZzogR3RhZ0ZuLFxuICBkb2N1bWVudDogRG9jdW1lbnRcbikge1xuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2V0dGluZ3MudHJhY2tpbmdDb2RlKSB7XG4gICAgICBpZiAoIWlzRGV2TW9kZSgpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VtcHR5IHRyYWNraW5nIGNvZGUgZm9yIEdvb2dsZSBBbmFseXRpY3MuIE1ha2Ugc3VyZSB0byBwcm92aWRlIG9uZSB3aGVuIGluaXRpYWxpemluZyBOZ3hHb29nbGVBbmFseXRpY3NNb2R1bGUuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWd0YWcpIHtcbiAgICAgIGlmICghaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignV2FzIG5vdCBwb3NzaWJsZSBjcmVhdGUgb3IgcmVhZCBndGFnKCkgZm4uIE1ha2Ugc3VyZSB0aGlzIG1vZHVsZSBpcyBydW5uaW5nIG9uIGEgQnJvd3NlciB3LyBhY2Nlc3MgdG8gV2luZG93IGludGVyZmFjZS4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgIGlmICghaXNEZXZNb2RlKCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignV2FzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgRG9jdW1lbnQgaW50ZXJmYWNlLiBNYWtlIHN1cmUgdGhpcyBtb2R1bGUgaXMgcnVubmluZyBvbiBhIEJyb3dzZXIgdy8gYWNjZXNzIGRvIERvY3VtZW50IGludGVyZmFjZS4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgZGVmYXVsdCBnYS5qcyB1cmlcbiAgICBzZXR0aW5ncy51cmkgPSBzZXR0aW5ncy51cmkgfHwgYGh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9JHtzZXR0aW5ncy50cmFja2luZ0NvZGV9YDtcblxuICAgIC8vIHRoZXNlIGNvbW1hbmRzIHNob3VsZCBydW4gZmlyc3QhXG4gICAgY29uc3QgaW5pdGlhbENvbW1hbmRzOiBBcnJheTxJR29vZ2xlQW5hbHl0aWNzQ29tbWFuZD4gPSBbXG4gICAgICB7IGNvbW1hbmQ6ICdqcycsIHZhbHVlczogWyBuZXcgRGF0ZSgpIF0gfSxcbiAgICAgIHsgY29tbWFuZDogJ2NvbmZpZycsIHZhbHVlczogWyBzZXR0aW5ncy50cmFja2luZ0NvZGUgXSB9XG4gICAgXTtcblxuICAgIHNldHRpbmdzLmluaXRDb21tYW5kcyA9IFsgLi4uaW5pdGlhbENvbW1hbmRzLCAuLi4oc2V0dGluZ3MuaW5pdENvbW1hbmRzIHx8IFtdKSBdO1xuXG4gICAgZm9yIChjb25zdCBjb21tYW5kIG9mIHNldHRpbmdzLmluaXRDb21tYW5kcykge1xuICAgICAgZ3RhZyhjb21tYW5kLmNvbW1hbmQsIC4uLmNvbW1hbmQudmFsdWVzKTtcbiAgICB9XG5cbiAgICBjb25zdCBzOiBIVE1MU2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHMuYXN5bmMgPSB0cnVlO1xuICAgIHMuc3JjID0gc2V0dGluZ3MudXJpO1xuXG4gICAgaWYgKHNldHRpbmdzLm5vbmNlKSB7XG4gICAgICBzLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBzZXR0aW5ncy5ub25jZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGVhZDogSFRNTEhlYWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICBoZWFkLmFwcGVuZENoaWxkKHMpO1xuICB9O1xufVxuIl19