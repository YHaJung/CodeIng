import { Directive, Optional, Input, HostListener, isDevMode, Inject } from '@angular/core';
import { GaEventCategoryDirective } from './ga-event-category.directive';
import { GoogleAnalyticsService } from '../services/google-analytics.service';
import { NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN } from '../tokens/ngx-google-analytics-settings-token';
export class GaEventDirective {
    constructor(gaCategoryDirective, gaService, settings) {
        this.gaCategoryDirective = gaCategoryDirective;
        this.gaService = gaService;
        this.settings = settings;
        this.gaBind = 'click';
    }
    ngOnInit() {
    }
    onClick() {
        if (this.gaBind === 'click') {
            this.trigger();
        }
    }
    onFocus() {
        if (this.gaBind === 'focus') {
            this.trigger();
        }
    }
    onBlur() {
        if (this.gaBind === 'blur') {
            this.trigger();
        }
    }
    trigger() {
        try {
            // Observação: não é obrigatório especificar uma categoria, uma etiqueta ou um valor. Consulte Eventos padrão do Google Analytics abaixo.
            // if (!this.$gaCategoryDirective) {
            //   throw new Error('You must provide a gaCategory attribute w/ gaEvent Directive.');
            // }
            if (!this.gaAction && !this.gaEvent) {
                throw new Error('You must provide a gaAction attribute to identify this event.');
            }
            this.gaService
                .event(this.gaAction || this.gaEvent, (this.gaCategoryDirective) ? this.gaCategoryDirective.gaCategory : undefined, this.gaLabel || this.label, this.gaValue, this.gaInteraction);
        }
        catch (err) {
            this.throw(err);
        }
    }
    throw(err) {
        if ((isDevMode() || this.settings.enableTracing) && console && console.warn) {
            console.warn(err);
        }
    }
}
GaEventDirective.decorators = [
    { type: Directive, args: [{
                selector: `[gaEvent]`,
                exportAs: 'gaEvent'
            },] }
];
GaEventDirective.ctorParameters = () => [
    { type: GaEventCategoryDirective, decorators: [{ type: Optional }] },
    { type: GoogleAnalyticsService },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_GOOGLE_ANALYTICS_SETTINGS_TOKEN,] }] }
];
GaEventDirective.propDecorators = {
    gaAction: [{ type: Input }],
    gaLabel: [{ type: Input }],
    label: [{ type: Input }],
    gaValue: [{ type: Input }],
    gaInteraction: [{ type: Input }],
    gaBind: [{ type: Input }],
    gaEvent: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }],
    onFocus: [{ type: HostListener, args: ['focus',] }],
    onBlur: [{ type: HostListener, args: ['blur',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2EtZXZlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uL3Byb2plY3RzL25neC1nb29nbGUtYW5hbHl0aWNzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2dhLWV2ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFVLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEcsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHOUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFPcEcsTUFBTSxPQUFPLGdCQUFnQjtJQUUzQixZQUNzQixtQkFBNkMsRUFDekQsU0FBaUMsRUFDWSxRQUFrQztRQUZuRSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTBCO1FBQ3pELGNBQVMsR0FBVCxTQUFTLENBQXdCO1FBQ1ksYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFTaEYsV0FBTSxHQUFXLE9BQU8sQ0FBQztJQVBsQyxDQUFDO0lBVUQsUUFBUTtJQUNSLENBQUM7SUFHRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDaEI7SUFDSCxDQUFDO0lBR0QsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQUdELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQzFCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7SUFFUyxPQUFPO1FBQ2YsSUFBSTtZQUNGLHlJQUF5STtZQUN6SSxvQ0FBb0M7WUFDcEMsc0ZBQXNGO1lBQ3RGLElBQUk7WUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQzthQUNsRjtZQUVELElBQUksQ0FBQyxTQUFTO2lCQUNULEtBQUssQ0FDSixJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQzdCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFDNUUsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUMxQixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxhQUFhLENBQ25CLENBQUM7U0FDUDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNqQjtJQUNILENBQUM7SUFFUyxLQUFLLENBQUMsR0FBVTtRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUMzRSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7O1lBekVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsUUFBUSxFQUFFLFNBQVM7YUFDcEI7OztZQVZRLHdCQUF3Qix1QkFjNUIsUUFBUTtZQWJKLHNCQUFzQjs0Q0FlMUIsTUFBTSxTQUFDLG1DQUFtQzs7O3VCQUk1QyxLQUFLO3NCQUNMLEtBQUs7b0JBQ0wsS0FBSztzQkFDTCxLQUFLOzRCQUNMLEtBQUs7cUJBQ0wsS0FBSztzQkFDTCxLQUFLO3NCQUtMLFlBQVksU0FBQyxPQUFPO3NCQU9wQixZQUFZLFNBQUMsT0FBTztxQkFPcEIsWUFBWSxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE9wdGlvbmFsLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBPbkluaXQsIGlzRGV2TW9kZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUgfSBmcm9tICcuL2dhLWV2ZW50LWNhdGVnb3J5LmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBHb29nbGVBbmFseXRpY3NTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZ29vZ2xlLWFuYWx5dGljcy5zZXJ2aWNlJztcbmltcG9ydCB7IEdhQmluZCB9IGZyb20gJy4uL3R5cGVzL2dhLWJpbmQudHlwZSc7XG5pbXBvcnQgeyBHYUFjdGlvbkVudW0gfSBmcm9tICcuLi9lbnVtcy9nYS1hY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTiB9IGZyb20gJy4uL3Rva2Vucy9uZ3gtZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncy10b2tlbic7XG5pbXBvcnQgeyBJR29vZ2xlQW5hbHl0aWNzU2V0dGluZ3MgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2ktZ29vZ2xlLWFuYWx5dGljcy1zZXR0aW5ncyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogYFtnYUV2ZW50XWAsXG4gIGV4cG9ydEFzOiAnZ2FFdmVudCdcbn0pXG5leHBvcnQgY2xhc3MgR2FFdmVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBnYUNhdGVnb3J5RGlyZWN0aXZlOiBHYUV2ZW50Q2F0ZWdvcnlEaXJlY3RpdmUsXG4gICAgcHJpdmF0ZSBnYVNlcnZpY2U6IEdvb2dsZUFuYWx5dGljc1NlcnZpY2UsXG4gICAgQEluamVjdChOR1hfR09PR0xFX0FOQUxZVElDU19TRVRUSU5HU19UT0tFTikgcHJpdmF0ZSBzZXR0aW5nczogSUdvb2dsZUFuYWx5dGljc1NldHRpbmdzXG4gICkge1xuICB9XG5cbiAgQElucHV0KCkgZ2FBY3Rpb246IEdhQWN0aW9uRW51bSB8IHN0cmluZztcbiAgQElucHV0KCkgZ2FMYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBsYWJlbDogc3RyaW5nO1xuICBASW5wdXQoKSBnYVZhbHVlOiBudW1iZXI7XG4gIEBJbnB1dCgpIGdhSW50ZXJhY3Rpb246IGJvb2xlYW47XG4gIEBJbnB1dCgpIGdhQmluZDogR2FCaW5kID0gJ2NsaWNrJztcbiAgQElucHV0KCkgZ2FFdmVudDogR2FBY3Rpb25FbnVtIHwgc3RyaW5nO1xuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLmdhQmluZCA9PT0gJ2NsaWNrJykge1xuICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxuICBvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmdhQmluZCA9PT0gJ2ZvY3VzJykge1xuICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignYmx1cicpXG4gIG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5nYUJpbmQgPT09ICdibHVyJykge1xuICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHRyaWdnZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE9ic2VydmHDp8OjbzogbsOjbyDDqSBvYnJpZ2F0w7NyaW8gZXNwZWNpZmljYXIgdW1hIGNhdGVnb3JpYSwgdW1hIGV0aXF1ZXRhIG91IHVtIHZhbG9yLiBDb25zdWx0ZSBFdmVudG9zIHBhZHLDo28gZG8gR29vZ2xlIEFuYWx5dGljcyBhYmFpeG8uXG4gICAgICAvLyBpZiAoIXRoaXMuJGdhQ2F0ZWdvcnlEaXJlY3RpdmUpIHtcbiAgICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgZ2FDYXRlZ29yeSBhdHRyaWJ1dGUgdy8gZ2FFdmVudCBEaXJlY3RpdmUuJyk7XG4gICAgICAvLyB9XG5cbiAgICAgIGlmICghdGhpcy5nYUFjdGlvbiAmJiAhdGhpcy5nYUV2ZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3QgcHJvdmlkZSBhIGdhQWN0aW9uIGF0dHJpYnV0ZSB0byBpZGVudGlmeSB0aGlzIGV2ZW50LicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmdhU2VydmljZVxuICAgICAgICAgIC5ldmVudChcbiAgICAgICAgICAgIHRoaXMuZ2FBY3Rpb24gfHwgdGhpcy5nYUV2ZW50LFxuICAgICAgICAgICAgKHRoaXMuZ2FDYXRlZ29yeURpcmVjdGl2ZSkgPyB0aGlzLmdhQ2F0ZWdvcnlEaXJlY3RpdmUuZ2FDYXRlZ29yeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRoaXMuZ2FMYWJlbCB8fCB0aGlzLmxhYmVsLFxuICAgICAgICAgICAgdGhpcy5nYVZhbHVlLFxuICAgICAgICAgICAgdGhpcy5nYUludGVyYWN0aW9uXG4gICAgICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRoaXMudGhyb3coZXJyKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgdGhyb3coZXJyOiBFcnJvcikge1xuICAgIGlmICgoaXNEZXZNb2RlKCkgfHwgdGhpcy5zZXR0aW5ncy5lbmFibGVUcmFjaW5nKSAmJiBjb25zb2xlICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==